generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  RIDER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  DELIVERED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String   @unique
  role      Role
  createdAt DateTime @default(now())

  // Relations
  ownedRestaurants Restaurant[]         @relation("UserRestaurants")
  customerOrders   Order[]              @relation("CustomerOrders")
  riderOrders      Order[]              @relation("RiderOrders")
  riderSessions    RiderOnlineSession[]
  ratings          Rating[]
  earnings         Earning[]
}

model Restaurant {
  id          Int    @id @default(autoincrement())
  name        String
  phone       String
  address     String
  ownerUserId Int?
  ownerUser   User?  @relation("UserRestaurants", fields: [ownerUserId], references: [id])

  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerUserId])
}

model Order {
  id           Int        @id @default(autoincrement())
  code         String     @unique
  customerId   Int
  customer     User       @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  riderId      Int?
  rider        User?      @relation("RiderOrders", fields: [riderId], references: [id])

  status OrderStatus @default(PENDING)
  items  OrderItem[]

  // Payments
  subTotal    Decimal  @db.Decimal(10, 2)
  deliveryFee Decimal  @db.Decimal(10, 2)
  tip         Decimal  @db.Decimal(10, 2)
  riderPayout Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2) // <-- Added for seed.ts compatibility
  distanceKm  Decimal? @db.Decimal(6, 2)

  assignedAt  DateTime?
  pickedUpAt  DateTime?
  deliveredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratings  Rating[]
  earnings Earning[]

  @@index([riderId])
  @@index([restaurantId])
  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  title     String
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  @@index([orderId])
}

model RiderOnlineSession {
  id        Int       @id @default(autoincrement())
  riderId   Int
  rider     User      @relation(fields: [riderId], references: [id])
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  @@index([riderId, startedAt])
}

model Rating {
  id      Int   @id @default(autoincrement())
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
  riderId Int
  rider   User  @relation(fields: [riderId], references: [id])

  score     Int // <-- renamed from "rating" to "score"
  comment   String?
  createdAt DateTime @default(now())

  @@index([riderId])
}

model Earning {
  id      Int      @id @default(autoincrement())
  riderId Int
  orderId Int
  amount  Decimal  @db.Decimal(10, 2)
  date    DateTime @default(now())

  rider User  @relation(fields: [riderId], references: [id])
  order Order @relation(fields: [orderId], references: [id])

  @@index([riderId])
  @@index([orderId])
}
